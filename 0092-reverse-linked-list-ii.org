#+title: 0092 Reverse Linked List ii
#+link: https://leetcode.com/problems/reverse-linked-list-ii/
#+tags: linkedlist twopointers

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

Follow up: Could you do it in one pass?

* Two pointer one pass

#+begin_src go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseBetween(head *ListNode, left int, right int) *ListNode {
    dummy := &ListNode{0, head}
    prev := dummy

    for i := 0; i < left-1; i++ {
        prev = prev.Next
    }
    current := prev.Next

    for i := left; i < right; i++ {
        neo := current.Next
        current.Next = neo.Next
        neo.Next = prev.Next
        prev.Next = neo
    }
    return dummy.Next
}
#+end_src

#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if not head or left == right:
            return head
        dummy = ListNode(0, head)
        prev = dummy
        for _ in range(left-1):
            prev = prev.next
        current = prev.next
        for _ in range(right - left):
            next = current.next
            current.next = next.next
            next.next = prev.next
            prev.next = next
        return dummy.next
#+end_src

TC:
- ~O(left)~ - ~left - 1~ iterations from dummy node to just before where reversal starts.
- ~O(right-left)~ - It takes ~right - left + 1~ iterations for reversing the nodes between ~right~ and ~left~.
- ~O(n)~ - It is ~O(left) + O(right-left)~ which is ~O(right)~ and right is at most ~n~. The upper bound for the TC is ~O(n)~.
SC:
- ~O(1)~
