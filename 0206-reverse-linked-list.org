#+title: 0206 Reverse Linked List
#+link: https://leetcode.com/problems/reverse-linked-list/
#+tags: linkedlist recursion

Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?

* Iterative Solution

#+begin_src go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
    var last *ListNode
    current := head
    for current != nil {
        next := current.Next
        current.Next = last
        last = current
        current = next
    }
    return last
}
#+end_src

#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        current = head
        while current:
            next = current.next
            current.next = prev
            prev = current
            current = next
        return prev
#+end_src

TC:
- O(n) where n is the number of nodes in the linked list.
SC:
- O(1) since only three pointers are used - next, prev

* Recursive Solution

#+begin_src go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
    return reverse(head, nil)
}
func reverse(current *ListNode, last *ListNode) *ListNode {
    if current == nil {
        return last
    }
    next := current.Next
    current.Next = last
    return reverse(next, current)
}
#+end_src

#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        return self.flip(head, None)

    def flip(self, current: Optional[ListNode], last: Optional[ListNode]):
        if current is None:
            return last

        next = current.next
        current.next = last
        return self.flip(next, current)
#+end_src
