#+title: 0704 Binary Search
#+link: https://leetcode.com/problems/binary-search/
#+tags: array binarysearch

Given an array of integers ~nums~ which is sorted in ascending order, and an integer target, write a function to search target in ~nums~. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: ~nums~ = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in ~nums~ and its index is 4

Example 2:
Input: ~nums~ = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in ~nums~ so return -1

Constraints:
1 <= ~nums~.length <= 104
-104 < ~nums~[i], target < 104
All the integers in ~nums~ are unique.
~nums~ is sorted in ascending order.

* Binary Search

#+begin_src go
func search(nums []int, target int) int {
    var mid, lo, hi int
    lo, hi = 0, len(nums)-1
    for lo <= hi {
        mid = (lo + hi) / 2
        if nums[mid] < target {
            lo = mid+1
        } else if target < nums[mid] {
            hi = mid-1
        } else {
            return mid
        }
    }
    return -1
}
#+end_src

#+begin_src python
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        lo, hi = 0, len(nums)-1
        while lo <= hi:
            mid = int((lo + hi) / 2)
            if nums[mid] < target:
                lo = mid+1
            elif target < nums[mid]:
                hi = mid-1
            else:
                return mid
        return -1
#+end_src

TC:
- ~O(log n)~
SC:
- ~O(1)~
