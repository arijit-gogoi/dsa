#+title: 0020 Valid Parenthesis
#+link: https://leetcode.com/problems/valid-parentheses/
#+tags: string stack hashmap

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false


Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

* Stack and Hashmap

O(n) TC and O(n) SC where n is ~len(str)~.

#+begin_src go
import "strings"

func isValid(str string) bool {
    match := map[rune]rune{
        ')': '(',
        ']': '[',
        '}': '{',
    }
    const opening = "([{"

    stack := []rune{}
    for _, char := range str {
        if strings.ContainsRune(opening, char) {
            stack = append(stack, char)
        }
        if val, ok := match[char]; ok {
            if len(stack) == 0 || stack[len(stack)-1] != val {
                return false
            }
            stack = stack[:len(stack)-1]
        }
    }
    return len(stack) == 0
}
#+end_src

#+begin_src python
class Solution:
    def isValid(self, s: str) -> bool:
        match = {
            ')': '(',
            ']': '[',
            '}': '{',
        }
        opening = "([{"

        stack = []
        for char in s:
            if char in opening:
                stack.append(char)
            if char in match:
                bracket = stack.pop()
                if bracket != match[char]:
                    return False
        return len(stack) == 0
#+end_src
