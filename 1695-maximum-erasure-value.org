#+title: 1695 Maximum Erasure Value
#+tags: array, hashtable, sliding window

* Description

You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

Example 1:

Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].
Example 2:

Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].

* Solutions

#+begin_src rust
use core::cmp::max;

impl Solution {
    pub fn maximum_unique_subarray(nums: Vec<i32>) -> i32 {
        let mut counter: [u8; 10001] = [0; 10001];
        let (mut start, mut end, mut max_sum, mut sum) = (0, 0, 0, 0);

        while end < nums.len() {
            counter[nums[end] as usize] += 1;
            sum += nums[end];

            while counter[nums[end] as usize] > 1 {
                sum -= nums[start];
                counter[nums[start] as usize] -= 1;
                start += 1;
            }

            max_sum = max(max_sum, sum);
            end += 1;
        }
    max_sum
    }
}
#+end_src

#+begin_src zig
const std = @import("std");

pub fn maximumUniqueSubarray(nums: []i32) i32 {
    var counter: [10001]u8 = undefined;
    var start: usize = 0;
    var end: usize = 0;
    var maxSum: i32 = 0;
    var sum: i32 = 0;

    while (end < nums.len) : (end += 1) {
        counter[nums[end]] += 1;
        sum += nums[end];

        while (counter[nums[end]] > 1) : (start += 1) {
            sum -= nums[start];
            counter[nums[start]] -= 1;
        }

        maxSum = if (sum > maxSum) sum else maxSum;
    }

    return maxSum;
}

test "maximumUniqueSubarray" {
    const nums = [_]i32{4, 2, 4, 5, 6};
    const expected = 17;
    const actual = maximumUniqueSubarray(nums);
    std.testing.expectEqual(expected, actual);
}
#+end_src

#+begin_src go
func maximumUniqueSubarray(nums []int) int {
	var counter [10001]int
    start, end, maxSum, sum := 0, 0, 0, 0

    for end < len(nums) {
        counter[nums[end]]++
        sum += nums[end]

        for counter[nums[end]] > 1 {
            sum -= nums[start]
            counter[nums[start]]--
            start++
        }

        maxSum = max(maxSum, sum)
        end++
    }

    return maxSum
}
#+end_src

#+begin_src python
class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        counter = [0] * 10001
        start, end, max_sum, _sum = 0, 0, 0, 0

        while end < len(nums):
            counter[nums[end]] += 1
            _sum += nums[end]

            while counter[nums[end]] > 1:
                _sum -= nums[start]
                counter[nums[start]] -= 1
                start += 1

            max_sum = max(max_sum, _sum)
            end += 1

        return max_sum
#+end_src

#+begin_example
nums: [4 , 2 , 4 , 5 , 6]
    :  4                    : sum =  4, max_sum =  4
       se
    :  4 , 2                : sum =  6, max_sum =  6
       s   e
    :  4 , 2 , 4            : sum = 10, max_sum = 10
       s       e
    :      2 , 4            : sum =  6, max_sum = 10
           s , e
    :      2 , 4 , 5        : sum = 11, max_sum = 11
           s       e
    :      2 , 4 , 5 , 6    : sum = 17, max_sum = 17
           s           e
#+end_example
