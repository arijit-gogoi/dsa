#+title: 0678 Valid Parenthesis String
#+link: https://leetcode.com/problems/valid-parenthesis-string/
#+tags: string dynamicprogramming stack greedy

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".


Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "(*)"
Output: true

Example 3:
Input: s = "(*))"
Output: true


Constraints:
1 <= s.length <= 100
s[i] is '(', ')' or '*'.

* Two Stacks

#+begin_src go
func checkValidString(s string) bool {
    var stack, subStack  int
    for _, c := range s {
        if c ==  '(' {
            stack++
        } else if c == '*' {
            if stack > 0 {
                stack--
                subStack += 2
            } else {
                subStack++
            }
        } else {
            if stack > 0 {
                stack--
            } else if subStack > 0 {
                subStack--
            } else {
                return false
            }
        }
    }
    return stack == 0
}
#+end_src
