#+title: 0567 Permutation In String
#+link: https://leetcode.com/problems/permutation-in-string/
#+tags: hashtable twopointers string slidingwindow permutation

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Constraints:
#+begin_example
1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
#+end_example

* Hashmap

TC is O(l1 + 26*l1*(l2-l1))
SC is O(1) and the hashmap contains at most 26 key value pairs.

#+begin_src go
func checkInclusion(s1 string, s2 string) bool {
    if len(s1) > len(s2) {
        return false
    }
    s1map := make(map[rune]int)

    for _, c := range s1 {
        s1map[c]++
    }

    for i := 0; i <= len(s2)-len(s1); i++ {
        s2map := make(map[rune]int)
        for _, c := range s2[i : i+len(s1)] {
            s2map[c]++
        }
        if matches(s1map, s2map) {
            return true
        }
    }
    return false
}

func matches(s1map, s2map map[rune]int) bool {
    for r, c := range s1map {
        if s2map[r] != c {
            return false
        }
    }
    return true
}
#+end_src

#+begin_src python
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        s1map = {}
        for c in s1:
            s1map[c] = s1map.get(c, 0) + 1

        for i in range(len(s2) - len(s1) + 1):
            s2map = {}
            for c in s2[i:i+len(s1)]:
                s2map[c] = s2map.get(c, 0) + 1
            if self.matches(s1map, s2map):
                return True

        return False

    def matches(self, s1map: dict, s2map: dict) -> bool:
        for r, c in s1map.items():
            if s2map.get(r, 0) != c:
                return False
        return True
#+end_src

* Frequency Counter Sliding Window
Linear Time Complexity.
Constant Space Complexity.

#+begin_src go
func checkInclusion(s1 string, s2 string) bool {
    var freq [26]int
    for i := range s1 {
        freq[s1[i]-97]++
    }

    start := 0
    for end := range s2 {
        freq[s2[end]-97]--
        if freq == [26]int{} {
            return true
        }
        if end + 1 >= len(s1) {
            freq[s2[start]-97]++
            start++
        }
    }
    return false
}
#+end_src

#+begin_src python
class Solution:
    def checkInclusion(s1: str, s2: str) -> bool:
        freq = [0] * 26
        for i in range(len(s1)):
            freq[ord(s1[i]) - 97] += 1

        start = 0
        for end in range(len(s2)):
            freq[ord(s2[end] - 97)] -= 1
            if freq == [0] * 26:
                return True
            if end + 1 >= len(s1):
                freq[ord(s2[start] - 97)] += 1
                start += 1

        return False
#+end_src

#+begin_src go
func checkInclusion(s1 string, s2 string) bool {
    if len(s1) > len(s2) {
        return false
    }
    var s1Freq, s2Freq [26]int
    for i := 0; i < len(s1); i++ {
        s1Freq[s1[i]-97]++
        s2Freq[s2[i]-97]++
    }
    start := 0
    for end := len(s1); end < len(s2); end++ {
        if s1Freq == s2Freq {
            return true
        }
        s2Freq[s2[end]-97]++
        s2Freq[s2[start]-97]--
        start++
    }
    return s1Freq == s2Freq
}
#+end_src
