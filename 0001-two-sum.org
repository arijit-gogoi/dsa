#+title: 0001 Two Sum
#+link: https://leetcode.com/problems/two-sum/
#+tags: array hashtable

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]


Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.


Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

* Brute Force Solution
O(n^2) TC
O(1)

#+begin_src go
func twoSum(nums []int, target int) []int {
	for i := 0; i < len(nums); i++ {
		for j := i+1; j < len(nums); j++ {
			if nums[i] + nums[j] == target {
				return []int{i, j}
			}
		}
	}
	return []int{}
}
#+end_src

#+begin_src python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[j] == target - nums[i]:
                    return [i, j]
#+end_src

* Hashtable
O(n) TC
O(n) SC since we create a hashtable.

#+begin_src go
func twoSum(nums []int, target int) []int {
    m := make(map[int]int)
    for i, v := range nums {
        if j, found := m[target-v]; found {
            return []int{i, j}
        }
        m[v] = i
    }
    return []int{}
}
#+end_src

#+begin_src python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        m = {}
        for i, v in enumerate(nums):
            if target - v in m:
                return [m[target - v], i]
            m[v] = i
        return []
#+end_src

#+begin_src rust
impl Solution {
    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {
        let mut m = std::collections::HashMap::new();

        for (i, &v) in nums.iter().enumerate() {
            if let Some(&j) = m.get(&(target - v)) {
                return vec![i as i32, j as i32]
            }
            m.insert(v, i);
        }
        vec![]
    }
}
#+end_src
