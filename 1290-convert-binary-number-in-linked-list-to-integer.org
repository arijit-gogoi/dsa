#+title: 1290 Convert Binary Number In Linked List To Integer
#+link: https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/
#+tag: linkedlist math

Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

The *most significant bit* is at the ~head~ of the linked list.

Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10

Example 2:
Input: head = [0]
Output: 0

Constraints:
The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.

* Bit math
O(n) TC and O(1) SC, where n is the length of ~head~.

#+begin_src go
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func getDecimalValue(head *ListNode) (decimalValue int) {
    for head != nil {
        bit := head.Val
        head = head.Next
        decimalValue = decimalValue * 2 + bit
    }
    return decimalValue
}
#+end_src

#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        decimal_value = 0
        while head:
            bit = head.val
            head = head.next
            decimal_value = decimal_value * 2 + bit
        return decimal_value
#+end_src
