#+title: 1287 Element Appearing More Than 25 Percent In Sorted Array

Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
Example 2:

Input: arr = [1,1]
Output: 1


Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 105

* Frequency Counter

#+begin_src go
func findSpecialInteger(arr []int) int {
    var freq [1e5+1]int
    var ans int

	// Linear time
    for _, v := range arr {
        freq[v] += 1
    }

	// Constant time
    for i := range freq {
        if freq[i] > len(arr)/4 {
            ans = i
        }
    }

    return ans
}
#+end_src

* Hashmap

#+begin_src go
func findSpecialInteger(arr []int) int {
    freq := make(map[int]int)
    var ans int

    for _, v := range arr {
        freq[v]++
    }

    for i, f := range freq {
        if f > len(arr)/4 {
            ans = i
        }
    }

    return ans
}
#+end_src

* Using steps

This method takes advantage of the fact that the thing is sorted.

#+begin_src go
func findSpecialInteger(arr []int) int {
    for i, v := range arr {
        if v == arr[i+len(arr)/4 ] {
            return v
        }
    }
    return -1
}
#+end_src


#+begin_src python
class Solution(object):
    def findSpecialInteger(self, arr):
        step = len(arr) // 4
        for i in range(len(arr) - step):
            if arr[i] == arr[i + step]:
                return arr[i]
        return arr[0]
#+end_src
