#+title: 0125 Valid Palindrome
#+link: https://leetcode.com/problems/valid-palindrome/description/
#+tags: twopointers string

A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.

Example 2:
Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

Example 3:
Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

Constraints:
1 <= s.length <= 2 * 105
s consists only of printable ASCII characters.

* Two pointers one pass

#+begin_src go
func isPalindrome(s string) bool {
    left, right := 0, len(s) - 1
    for left < right {
        if !isAlphanumeric(byte(s[left])) {
            left++
        } else if !isAlphanumeric(byte(s[right])) {
            right--
        } else if toLower(byte(s[left])) != toLower(byte(s[right])) {
            return false
        } else {
            left++
            right--
        }
    }
    return true
}

func isAlphanumeric(c byte) bool {
    return isLetter(c) || isDigit(c)
}

func isLetter(c byte) bool {
    return 'A' <= c && c <= 'Z' || 'a' <= c && c <= 'z'
}

func isDigit(c byte) bool {
    return '0' <= c && c <= '9'
}

func toLower(c byte) byte {
    if 'A' <= c && c <= 'Z' {
        return c + 32
    }
    return c
}
#+end_src

#+begin_src python
class Solution:
    def isPalindrome(self, s: str) -> bool:
        left, right = 0, len(s) - 1
        while left < right:
            if not s[left].isalnum():
                left += 1
            elif not s[right].isalnum():
                right -= 1
            elif s[left].lower() != s[right].lower():
                return False
            else:
                left += 1
                right -= 1
        return True
#+end_src

TC: ~O(n)~ where ~n~ is the length of string ~s~.
SC: ~O(1)~ since no additional data structure was used.
