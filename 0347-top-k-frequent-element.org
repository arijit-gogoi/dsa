#+title: 0347 Top K Frequent Element
#+link: https://leetcode.com/problems/top-k-frequent-elements/
#+tags: array hashtable divideandconquer sorting heap priorityqueue bucketsort quickselect

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]


Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.


Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

* Quickselect or Hoare's Selection Algorithm (same thing)
https://leetcode.com/problems/top-k-frequent-elements/editorial/

Lamuto's Partition Scheme is used for partition.

#+begin_src go
func topKFrequent(nums []int, k int) []int {
    count := make(map[int]int)
    for _, num := range nums {
        count[num]++
    }
    unique := make([]int, 0, len(count))
    for num := range count {
        unique = append(unique, num)
    }
    var partition func(left, right, pivot_index int) int
    partition = func(left, right, pivot_index int) int {
        pivot_frequency := count[unique[pivot_index]]
        // 1. Move the pivot to end
        unique[pivot_index], unique[right] = unique[right], unique[pivot_index]
        // 2. Move all less frequent elements to the left
        store_index := left
        for i := left; i < right; i++ {
            if count[unique[i]] < pivot_frequency {
                unique[store_index], unique[i] = unique[i], unique[store_index]
                store_index += 1
            }
        }
        // 3. Move the pivot to its final place
        unique[right], unique[store_index] = unique[store_index], unique[right]
        return store_index
    }
    var quickselect func(left, right, k_smallest int)
    quickselect = func(left, right, k_smallest int) {
        // base case: the list contains only one element
        if left == right {
            return
        }
        // Select a random pivot_index
        pivot_index := rand.Intn(right - left + 1) + left
        // Find the pivot position in a sorted list
        pivot_index = partition(left, right, pivot_index)
        // If the pivot is in its final sorted position
        if k_smallest == pivot_index {
            return
        } else if k_smallest < pivot_index {
            quickselect(left, pivot_index - 1, k_smallest)
        } else {
            quickselect(pivot_index + 1, right, k_smallest)
        }
    }
    n := len(unique)
    quickselect(0, n - 1, n - k)
    return unique[n - k:]
}
#+end_src
