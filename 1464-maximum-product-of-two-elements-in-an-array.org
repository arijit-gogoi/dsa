#+title: 1464 Maximum Product Of Two Elements In An Array
#+link: https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/
#+tags: array sorting heappriorityqueue

Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).


Example 1:

Input: nums = [3,4,5,2]
Output: 12
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12


Constraints:

2 <= nums.length <= 500
1 <= nums[i] <= 10^3

* Quadratic Time Complexity

TC: O(n^2) 

#+begin_src go
func maxProduct(nums []int) int {
	product := 0
	for i := 0; i < len(nums); i++ {
		for j := i + 1; j < len(nums); j++ {
			product = max(product, (nums[i]-1) * (nums[j]-1))
		}
	}
	return product
}
#+end_src

#+begin_src python
class Solution:
    def maxProductuct(self, nums: List[int]) -> int:
        product = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                product = max(product, (nums[i] - 1) * (nums[j] - 1))

        return product
#+end_src

* O(n * log n) Time Complexity

Sorting takes O(n * log n) time.

#+begin_src go
func maxProduct(nums []int) int {
    sort.Ints(nums)
    x := nums[len(nums)-1] - 1
    y := nums[len(nums)-2] - 1
    return x * y
}
#+end_src

#+begin_src python
def Solution:
    def maxProduct(self, nums: List[int]) -> int:
        nums.sort()
        x = nums[-1]
        y = nums[-2]
        return (x - 1) * (y - 1)
#+end_src

* Linear time solution

Linear time complexity. We iterate over nums once, performing O(1)O(1)O(1) work at each iteration.
Constant space.

#+begin_src go
func maxProduct(nums []int) int {
    max1 := 0
    max2 := 0

    for _, n := range nums {
        if n > max1 {
            max2 = max1
            max1 = n
        } else {
            max2 = max(max2, n)
        }
    }
    return (max1 - 1) * (max2 - 1)
}
#+end_src

#+begin_src python
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        m1, m2 = 0, 0

        for n in nums:
            if n > m1:
                m2 = m1
                m1 = n
            else:
                m2 = max(m2, n)

        return (m1 - 1) * (m2 - 1)
#+end_src
